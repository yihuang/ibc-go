"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[67723],{55040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=n(85893),i=n(11151);const a={slug:"/",sidebar_position:0},s="IBC-Go Documentation",r={id:"intro",title:"IBC-Go Documentation",description:"Welcome to the IBC-Go documentation!",source:"@site/versioned_docs/version-v7.8.x/00-intro.md",sourceDirName:".",slug:"/",permalink:"/v7/",draft:!1,unlisted:!1,tags:[],version:"v7.8.x",sidebarPosition:0,frontMatter:{slug:"/",sidebar_position:0},sidebar:"defaultSidebar",next:{title:"Overview",permalink:"/v7/ibc/overview"}},c={},d=[];function l(e){const t={h1:"h1",p:"p",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"ibc-go-documentation",children:"IBC-Go Documentation"}),"\n",(0,o.jsx)(t.p,{children:"Welcome to the IBC-Go documentation!"}),"\n",(0,o.jsx)(t.p,{children:"The Inter-Blockchain Communication protocol (IBC) is an end-to-end, connection-oriented, stateful protocol for reliable, ordered, and authenticated communication between heterogeneous blockchains arranged in an unknown and dynamic topology."}),"\n",(0,o.jsx)(t.p,{children:"IBC is a protocol that allows blockchains to talk to each other."}),"\n",(0,o.jsx)(t.p,{children:"The protocol realizes this interoperability by specifying a set of data structures, abstractions, and semantics that can be implemented by any distributed ledger that satisfies a small set of requirements."}),"\n",(0,o.jsx)(t.p,{children:"IBC can be used to build a wide range of cross-chain applications that include token transfers, atomic swaps, multi-chain smart contracts (with or without mutually comprehensible VMs), and data and code sharding of various kinds."})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var o=n(67294);const i={},a=o.createContext(i);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);